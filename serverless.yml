# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: luizsetten
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: games-that-i-played
# "service" is the name of this project. This will also be added to your AWS resource names.
service: games-that-i-played

stages:
  prod:
    observability: true

  default:
    observability: false
    params:
      tableName: "games-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [GamesTable, Arn]
  environment:
    GAMES_TABLE: ${param:tableName}

functions:
  create-games:
    handler: handler.create
    events:
      - httpApi: "POST /games"
  list-games:
    handler: handler.list
    events:
      - httpApi: "GET /games"
  get-game:
    handler: handler.get
    events:
      - httpApi: "GET /games/{gameId}"
  update-game:
    handler: handler.update
    events:
      - httpApi: "PUT /games/{gameId}"
  delete-game:
    handler: handler.delete
    events:
      - httpApi: "DELETE /games/{gameId}"

resources:
  Resources:
    GamesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:tableName}
